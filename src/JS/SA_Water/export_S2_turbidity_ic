/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED"),
    s2_toa = ee.ImageCollection("COPERNICUS/S2"),
    roi = /* color: #d63000 */ee.Geometry.Point([138.4984326551987, -34.96921238033906]),
    s2c = ee.ImageCollection("COPERNICUS/S2_CLOUD_PROBABILITY"),
    ref = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[138.36076629045112, -35.03482367042537],
           [138.34977996232612, -34.754355255616616],
           [138.3381069886933, -34.754355255616616],
           [138.35115325334175, -35.03426144089715]]],
         [[[138.16301238420112, -34.901467160125094],
           [138.3436001527558, -34.898088229372604],
           [138.342913507248, -34.88457111635704],
           [138.16438567521675, -34.8879506030997]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Descrip: 
// Author: Sami Rifai
// Date: 2023-09-14 (start)
//       modifications ongoing



// ==============================================================
// User options ------------------------------------------------
// ==============================================================
var amc = ee.FeatureCollection("users/srifai/SA_Water_ROIs");
var amc_geo = amc.union().geometry(); 
var mgrs_tile = "54HTG"
var date_start = "2013-03-18"
var date_end = "2023-09-18"
// var date_start = "2021-01-01"
// var date_end = "2022-01-01"
var cloud_threshold = 50
var valid_frac_threshold = 0.25
var roi_bbox = amc.union(100).geometry().bounds();
 
var out_var_names = "turb_s2";
var export_scale = 30; 
var product_name = "S2"
var fnp = product_name+"_"+out_var_names+"_"+date_start+"_"+date_end;
print(fnp)

// =========================================================
// Functions -----------------------------------------------
// =========================================================

/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  var out = image.updateMask(mask).divide(10000);
  
  var optical = out.select(["B.*"],
  ["aerosols","blue","green","red","rededge1","rededge2","rededge3","nir","rededge4",
  "watervapor","cirrus","swir1","swir2"])
  out = out.select(['QA.*']).addBands(optical)
  out = out.copyProperties(image)
  
  return(out);
}


var fn_t = function(image) {
  // Description: Calculate turbidity estimate in Formazin Nephelometric Unit (FNU)
  // Reference: Dogliotti et al 2015, Remote Sensing of Environment
  // Input: image with red and SWIR1 bands in reflectane units
  // Notes: See ACOLITE for most recent parameter calibrations
  
    var turbidity = image.expression(
        '(A_t * (p_w * scale_factor) / (1 - ((p_w * scale_factor )/ C)))', {
            'p_w': image.select('red'), //red band mid wv_len = 645.5nm
            'A_t': 378.46, //calib param (ACOLITE)
            'B_t': 0.33, //calib param (ACOLITE)
            'C': 0.19905, //calib param (ACOLITE)
            'pi': Math.PI,
            'scale_factor': 1//0.0001 //band info
        }).rename('turb_s2');
        
        // TO DO: mask turbidity for faulty values
        // var swir_mask = image.select('SWIR1'); // UNUSED
        // var turb_mask = turbidity.updateMask(swir_mask)
                                    // .updateMask(turbidity.gte(0));
                                    
        return(image.addBands(turbidity));
    };

// Join two collections on their 'system:index' property.
// The propertyName parameter is the name of the property
// that references the joined image.
function indexJoin(collectionA, collectionB, propertyName) {
  var joined = ee.ImageCollection(ee.Join.saveFirst(propertyName).apply({
    primary: collectionA,
    secondary: collectionB,
    condition: ee.Filter.equals({
      leftField: 'system:index',
      rightField: 'system:index'})
  }));
  // Merge the bands of the joined image.
  return joined.map(function(image) {
    return image.addBands(ee.Image(image.get(propertyName)));
  });
}

// Aggressively mask clouds and shadows.
function maskImage(image) {
  // Compute the cloud displacement index from the L1C bands.
  var cdi = ee.Algorithms.Sentinel2.CDI(image);
  var s2cloud = image.select('probability');
  var p_cloud = s2cloud.rename("p_cloud");
  var cirrus = image.select('B10').multiply(0.0001);
  

  // Assume low-to-mid atmospheric clouds to be pixels where probability
  // is greater than 65%, and CDI is less than -0.5. For higher atmosphere
  // cirrus clouds, assume the cirrus band is greater than 0.01.
  // The final cloud mask is one or both of these conditions.
  var isCloud = s2cloud.gt(50).and(cdi.lt(-0.5)).or(cirrus.gt(0.01));
  var isCloud2 = s2cloud.lt(10).focalMin(3, 'circle', 'pixels');

  // Reproject is required to perform spatial operations at 20m scale.
  // 20m scale is for speed, and assumes clouds don't require 10m precision.
  isCloud = isCloud.focalMin(3)
                   .focalMax(16); //16
  isCloud = isCloud.reproject({crs: cdi.projection(), scale: 100});
  isCloud2 = isCloud2.reproject({crs: cdi.projection(), scale: 100});

  // Project shadows from clouds we found in the last step. This assumes we're working in
  // a UTM projection.
  var shadowAzimuth = ee.Number(90)
      .subtract(ee.Number(image.get('MEAN_SOLAR_AZIMUTH_ANGLE')));

  // With the following reproject, the shadows are projected 5km.
  isCloud = isCloud.directionalDistanceTransform(shadowAzimuth, 50);
  isCloud = isCloud.reproject({crs: cdi.projection(), scale: 100});

  isCloud = isCloud.select('distance').mask();
  
  var optical = image.select(["B.*"],
  ["aerosols","blue","green","red","rededge1","rededge2","rededge3","nir","rededge4",
  "watervapor","cirrus","swir1","swir2"])
  .divide(10000)
  
  var redMask = optical.select("red").lte(0.07);

  var out = optical.updateMask(isCloud.not())
                   .updateMask(isCloud2)
                  // .updateMask(redMask)
                   .addBands(p_cloud)
                   
  // var out = image.select(['QA.*'])
  //               .addBands(optical)
  //               .addBands(p_cloud)
  // out = out.copyProperties(image)
  // out = optical.updateMask(isCloud.not())
  
  // var out = image.select('B2', 'B3', 'B4').updateMask(isCloud.not());
  return(out)
}


// =========================================================
// Main -----------------------------------------------
// =========================================================


// // Join the cloud probability dataset to surface reflectance.
// var withCloudProbability = indexJoin(s2Sr, s2c, 'cloud_probability');



s2_toa = s2_toa
   .filter(ee.Filter.eq('MGRS_TILE',mgrs_tile))
   .filter(ee.Filter.date("2016-09-01","2016-11-30"))
   .filter(ee.Filter.lte("CLOUDY_PIXEL_PERCENTAGE",cloud_threshold))
   .sort("CLOUDY_PIXEL_PERCENTAGE")

print(s2_toa)

// print(s2c.first())
// s2c = s2c
//   .filter(ee.Filter.eq('MGRS_TILE',mgrs_tile))
//   .filter(ee.Filter.date("2016-10-01","2016-10-30"))
//   .filter(ee.Filter.lte("CLOUDY_PIXEL_PERCENTAGE",cloud_threshold))
// print(s2c)


var ss = indexJoin(s2_toa, s2c, 'cloud_probability');
print('ss',ss)


ss = ss.map(maskImage)
  .map(fn_t)
  .first()


print(ss)
var rgbVis = {
  min: 0.0,
  max: 0.3,
  bands: ['red', 'green', 'blue'],
};

Map.addLayer(ss, rgbVis, 'RGB',false);

Map.addLayer(ss, 
 {bands:'turb_s2',min:0,max:100,palette:['black','red','orange','yellow']}, 
 'turbidity',false);
 

// var darkObjectSubtraction = function(i){
//   var d = i.reduceRegion(ee.Reducer.min(),ref).toImage()
//   var out = i.subtract(d);
//   return(out)
// }
// var dos = darkObjectSubtraction(ss)
// Map.addLayer(ss, rgbVis, 'DOS RGB');
