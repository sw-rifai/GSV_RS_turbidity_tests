/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mydocga = ee.ImageCollection("MODIS/006/MYDOCGA"),
    myd09q1 = ee.ImageCollection("MODIS/061/MYD09Q1"),
    myd09ga = ee.ImageCollection("MODIS/061/MYD09GA"),
    myd13q1 = ee.ImageCollection("MODIS/061/MYD13Q1"),
    l3smi = ee.ImageCollection("NASA/OCEANDATA/MODIS-Aqua/L3SMI"),
    amc = ee.FeatureCollection("users/srifai/SA_Water_ROIs"),
    gpm = ee.ImageCollection("NASA/GPM_L3/IMERG_MONTHLY_V06"),
    mod09ga = ee.ImageCollection("MODIS/061/MOD09GA");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Description: 
// - Calculate (empirical) Kd490 from MODIS SR products
// - Export weekly time series           

// User options =====================================
// var date_start = "2002-09-03"  // 
// var date_end = "2003-12-31" // 

// part 1: "2002-07-03" to "2012-12-31"
// part 2: "2012-12-31" to "2023-07-01"

// PART 1
// var date_start = "2002-07-03"  // 
// var date_end = "2012-12-31" // 

// PART 2
var date_start = "2012-12-31"  // 
var date_end = "2023-07-01" // 


var roi = amc; 
var roi_bbox = amc.union(500).geometry().buffer(2000).bounds(500);
var ic = mod09ga; // check!
var product_name = "MOD09GA" // check!
var out_var_names = "kd490_mod"
var export_resolution = 500;
var fnp = product_name+"_"+out_var_names+"_"+date_start+"_"+date_end
print(fnp)

// viz options
var inferno = ["#000004FF", "#1B0C42FF", "#4B0C6BFF", "#781C6DFF", "#A52C60FF", 
"#CF4446FF", "#ED6925FF", "#FB9A06FF", "#F7D03CFF", "#FCFFA4FF"]               



// Functions =========================================
var getQABits = function(image, start, end, newName) {
    // Compute the bits we need to extract.
    var pattern = 0;
    for (var i = start; i <= end; i++) {
       pattern += Math.pow(2, i);
    }
    var out = image.select([0], [newName])
                  .bitwiseAnd(pattern)
                  .rightShift(start);
    return(image.addBands(out))
};


function qa_mydocga(i){
  var qa = i.select('QC_500m').unmask()
  qa = getQABits(qa, 0,1,"VI")
  var good = qa.select("VI").eq(0); 

  var b3_mask = getQABits(i.select("QC_500m"), 10,13,'b3m').select("b3m").eq(0);
  var b4_mask = getQABits(i.select("QC_500m"), 14,17,'b4m').select("b4m").eq(0);


  var cloud = getQABits(i.select("state_1km"), 0,1,"cloud");
  cloud = cloud.select("cloud").eq(0); 

  var shadow = getQABits(i.select("state_1km"), 2,2,"shadow");
  shadow = shadow.select("shadow").eq(0); 

  var land = getQABits(i.select("state_1km"), 3,5,"land");
  var land_mask = land.select("land").neq(1).rename("land_mask"); 

  var blue_green_rat = i.select("sur_refl_b03").divide(i.select("sur_refl_b04"))
                        .log10()
                        .rename("bg10")
                        .gt(-0.7)
  var swir_mask = i.select("sur_refl_b07").multiply(0.0001)
                   .lte(0.05)

  var i_out = i.unmask().updateMask(good)
                        .updateMask(cloud)
                        .updateMask(shadow)
                        .updateMask(land_mask)
                        .updateMask(b3_mask)
                        .updateMask(b4_mask)
                        .updateMask(swir_mask)
                        .updateMask(blue_green_rat); 
                        
  return(i_out); 
}

// calculate Normalized Difference Turbidity Index
// b1:red, b4:green, b3: blue
function calc_ndti(i){
  // MYD09GA
  // green: sur_refl_b04
  // red: sur_refl_b01
  // ndti = (r-g)/(r+g)   // scale factor is equivalent, so don't need to apply
  var ndti = i.normalizedDifference(["sur_refl_b01","sur_refl_b04"])
              .rename("ndti")
              .toDouble()

  var out = i.addBands(ndti)
  return(out)
}

function calc_kd490(i){
  // Reference: Tomlinson et al., 2019 Remote Sensing Letters
  // Description: Empirical Kd490 developed for the Chesapeake bay
  // notes: a1 and a0 were derived for the Chesapeake
  // Equation: 
  // Kd = a1 * [(R645 - R868)/(R469 - R858)] + a0
  // a1: 2.8
  // a0: -0.69
  // 
  // For MYD09GA
  // R645: sur_refl_b01
  // R858: sur_refl_b02
  // R469: sur_refl_b03
  var kd490 = i.expression(
    "(a1*((R645 - R858)/(R469 - R858)) + a0)",
    {R645: i.select("sur_refl_b01"),
     R858: i.select("sur_refl_b02"),
     R469: i.select("sur_refl_b03"),
     a1: 2.8,
     a0: -0.69
    })
    .rename("kd490")
    .toDouble()

  var out = i.addBands(kd490)
  return(out)
}

var fn_kd490_mod09GA = function(image) {
  // Description: Calculate diffuse attenuation coefficient (kd490)
  // Reference: https://oceancolor.gsfc.nasa.gov/resources/atbd/kd/
  // Input: image with blue and green in reflectane units
  // Notes: See https://oceancolor.gsfc.nasa.gov/resources/atbd/kd/
  
    var log10_kd490 = image.expression(
        'a0 + a1*log10(Blue/Green) + a2*(log10(Blue/Green))**2 + a3*(log10(Blue/Green))**3 + a4*(log10(Blue/Green))**4', {
            'Blue': image.select('sur_refl_b03'), //
            'Green': image.select('sur_refl_b04'), //
            'a0': -0.8813, // sensor specific calib param 
            'a1': -2.0584, //sensor specific calib param  
            'a2': 2.5878, //sensor specific calib param  
            'a3': -3.4885,  //sensor specific calib param 
            'a4': -1.5061, //sensor specific calib param  
            'pi': Math.PI,
            'scale_factor': 1//0.0001 //band info
        }).rename('log10_mod');
        
      var kd490 = ee.Image(0.0166).add(ee.Image(10).pow(log10_kd490))
                    .rename("kd490_mod")

        return(image.addBands(kd490));
    };



// MAIN ====================================================

// assemble list of dates
var year_start = ee.Date(date_start).get("year")
var year_end = ee.Date(date_end).get("year")
var years = ee.List.sequence(year_start,year_end,1)
var ydays = ee.List.sequence(1,365,1)

var dates = years.map(function(y){
  var out1 = ydays.map(function(d){
    var out2 = ee.Date.parse("Y, D",
        ee.String(ee.Number(y).toInt()).cat(", ").cat(ee.Number(d).toInt()))
    return(out2)
  })
  return(out1)
}).flatten().sort()
dates = dates.filter(ee.Filter.greaterThanOrEquals('item',ee.Date(date_start)))
dates = dates.filter(ee.Filter.lessThanOrEquals('item',ee.Date(date_end)))
// print(dates)

// fix AMC geometries
amc = amc.map(function(f){
  var out = f.simplify(100)
             .buffer(-500);
  return(out)
})

// // composite IC by week
// var ic2 = dates.map(function(d){
//   var d1 = ee.Date(d)
//   var d2 = d1.advance(1,'day')
//   var out = ic.filter(ee.Filter.date(d1,d2))
//       .map(qa_mydocga)
//       .map(fn_kd490_mod09GA)
//       .median()
//       // .select(out_var_names)
//       .set("system:time_start",d1.millis())
//       .set("system:time_end",d1.millis())
//   var n_bands = out.bandNames().size()
//   out = out.set("n_bands",n_bands)

// return(out)
// })

// composite IC by week
var ic2 = ic.filter(ee.Filter.date(date_start,date_end))
      .map(qa_mydocga)
      .map(fn_kd490_mod09GA)
      
// ic2 = ee.ImageCollection.fromImages(ic2.flatten())
// print(ic2)

// remove empty images (important!)
// ic2 = ic2.filter(ee.Filter.greaterThan('n_bands',0)) 
// print(ic2)

var export_dates = ic2.map(function(i){
  var f = ee.Feature(null,{'date':i.date().format()})
  return(f)
});
// print(export_dates)

// var pal_inferno = ["#000004FF", "#1B0C42FF", "#4B0C6BFF", "#781C6DFF", "#A52C60FF", 
// "#CF4446FF", "#ED6925FF", "#FB9A06FF", "#F7D03CFF", "#FCFFA4FF"]
// Map.addLayer(ic2.select("sur_refl_b.*"),
//     {min:0,max:0.5,palette:pal_inferno,bands:['sur_refl_b04']},'sr', false)
// Map.addLayer(ic2.select(out_var_names),
//     {min:0,max:0.5,palette:pal_inferno},'kd490', false)
// Map.addLayer(ic2.select('bg10'),
//     {min:0,max:0.5,palette:pal_inferno},'bg10', false)

// Map.addLayer(ic2.select('land'),
//     {},'land',false)

               
// // EXPORT SECTION ==========================================

var export_stack = ic2.select(out_var_names).toBands(); 
// print(export_stack)
Export.image.toDrive(
  // image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)
{
  image:export_stack,
  description:fnp,
  folder:"gee_SAWater_turbidity", // specify a folder in google drive
  fileNamePrefix:fnp,
  region:roi_bbox,
  scale:export_resolution,
  crs:"EPSG:4326",
  fileFormat:"GeoTIFF"
}
)

Export.table.toDrive(//collection, description, folder, fileNamePrefix, fileFormat, selectors)
{
  collection:export_dates, 
  description:"DATES_" +fnp,
  folder:"gee_SAWater_turbidity", // specify a folder in google drive
  fileNamePrefix:"DATES_"+fnp,
  fileFormat:'csv'
}
)



