/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mydocga = ee.ImageCollection("MODIS/006/MYDOCGA"),
    myd09q1 = ee.ImageCollection("MODIS/061/MYD09Q1"),
    myd09ga = ee.ImageCollection("MODIS/061/MYD09GA"),
    myd13q1 = ee.ImageCollection("MODIS/061/MYD13Q1"),
    l3smi = ee.ImageCollection("NASA/OCEANDATA/MODIS-Aqua/L3SMI"),
    amc = ee.FeatureCollection("users/srifai/SA_Water_ROIs"),
    gpm = ee.ImageCollection("NASA/GPM_L3/IMERG_MONTHLY_V06"),
    mod09ga = ee.ImageCollection("MODIS/061/MOD09GA");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Description: 
// - Calculate turbidity indices from MODIS SR products
// - Export daily time series           
// - Necessary to export in two parts because max bands for image export is 5000

// var date_start = "2016-10-06" // debugging
// var date_end = "2016-10-07" // debugging
  
// User options =====================================
// part 1: "2000-03-01" to "2012-12-31"
// part 2: "2012-12-31" to "2023-07-01"

// PART 1
var date_start = "2000-03-01"  // 
var date_end = "2012-12-31" // 

// PART 2
// var date_start = "2012-12-31"  // 
// var date_end = "2023-11-01" // 



var roi = amc; 
var ic = mod09ga; // check!
var product_name = "MOD09GA" // check!
var time_step = "daily";
var out_var_names = "blue_to_green"
var fnp = product_name+"_"+out_var_names+"_"+time_step+"_"+date_start+"_"+date_end
print(fnp)

// viz options
var inferno = ["#000004FF", "#1B0C42FF", "#4B0C6BFF", "#781C6DFF", "#A52C60FF", 
"#CF4446FF", "#ED6925FF", "#FB9A06FF", "#F7D03CFF", "#FCFFA4FF"]               

var roi_bbox = amc.union(500).geometry().buffer(2000).bounds(500);


// Functions ================================================================
var getQABits = function(image, start, end, newName) {
    // Compute the bits we need to extract.
    var pattern = 0;
    for (var i = start; i <= end; i++) {
       pattern += Math.pow(2, i);
    }
    var out = image.select([0], [newName])
                  .bitwiseAnd(pattern)
                  .rightShift(start);
    return(image.addBands(out))
};


function qa_mod09ga(i){
  var qa = i.select('QC_500m').unmask()
  qa = getQABits(qa, 0,1,"VI")
  var good = qa.select("VI").lte(1); 

  // red
  var qa_b1 = getQABits(i.select("QC_500m"), 2,5,"qa_b1");
  qa_b1 = qa_b1.select("qa_b1").eq(0); 

  // nir
  var qa_b2 = getQABits(i.select("QC_500m"), 6,9,"qa_b2");
  qa_b2 = qa_b2.select("qa_b2").eq(0); 

  // blue
  var qa_b3 = getQABits(i.select("QC_500m"), 10,13,"qa_b3");
  qa_b3 = qa_b3.select("qa_b3").eq(0); 

  // green
  var qa_b4 = getQABits(i.select("QC_500m"), 14,17,"qa_b4");
  qa_b4 = qa_b4.select("qa_b4").eq(0); 

  var cloud = getQABits(i.select("state_1km"), 0,1,"cloud");
  cloud = cloud.select("cloud").eq(0); 

  var shadow = getQABits(i.select("state_1km"), 2,2,"shadow");
  shadow = shadow.select("shadow").eq(0); 

  var brdf = getQABits(i.select("state_1km"), 14,14,"brdf");
  brdf = brdf.select("brdf").eq(0); 

  var cloudadj = getQABits(i.select("state_1km"), 13,13,"cloudadj");
  cloudadj = cloudadj.select("cloudadj").eq(0); 

  var aerosol = getQABits(i.select("state_1km"), 6,7,"aerosol");
  aerosol = aerosol.select("aerosol").lte(1); 

  var cirrus = getQABits(i.select("state_1km"), 8,9,"cirrus")
                           .select("cirrus").lte(0); 
  var icloud = getQABits(i.select("state_1km"), 10, 10,"icloud")
                           .select("icloud").lte(0); 
  
  var i_out = i.unmask()
              // .updateMask(good)
              .updateMask(qa_b3)
              // .updateMask(qa_b1) // keep
              .updateMask(qa_b4) // keep
              .updateMask(cloud) // keep
              .updateMask(shadow) // keep
              // .updateMask(brdf) // ?
              .updateMask(cloudadj) // ?
              .updateMask(cirrus) // helps a bit?
              .updateMask(icloud) // keep
              // .updateMask(aerosol) // not helpful
  return(i_out); 
}

function calc_ndti(i){
  // calculate Normalized Difference Turbidity Index
  // b1:red, b4:green, b3: blue
  // MYD09GA
  // green: sur_refl_b04
  // red: sur_refl_b01
  // ndti = (r-g)/(r+g)   // scale factor is equivalent, so don't need to apply
  var ndti = i.normalizedDifference(["sur_refl_b01","sur_refl_b04"])
              .rename("ndti")
              .toDouble()

  var out = i.addBands(ndti)
  return(out)
}


function calc_blue_to_green(i){
// for eventual kd490 calculation
// https://oceancolor.gsfc.nasa.gov/resources/atbd/kd/
 var blue = i.select("sur_refl_b03"); // 488
 var green = i.select("sur_refl_b04"); // 547
 var blue_to_green = blue.divide(green).rename("blue_to_green"); 
 var out = i.addBands(blue_to_green)
 return(out)
}


// MAIN ====================================================

// assemble list of dates
var year_start = ee.Date(date_start).get("year")
var year_end = ee.Date(date_end).get("year")
var years = ee.List.sequence(year_start,year_end,1)
var ydays = ee.List.sequence(1,365,1)

var dates = years.map(function(y){
  var out1 = ydays.map(function(d){
    var out2 = ee.Date.parse("Y, D",
        ee.String(ee.Number(y).toInt()).cat(", ").cat(ee.Number(d).toInt()))
    return(out2)
  })
  return(out1)
}).flatten().sort()
dates = dates.filter(ee.Filter.greaterThanOrEquals('item',ee.Date(date_start)))
dates = dates.filter(ee.Filter.lessThanOrEquals('item',ee.Date(date_end)))
// print(dates)

// fix AMC geometries
amc = amc.map(function(f){
  var out = f.simplify(100)
             .buffer(-500);
  return(out)
})

// composite IC by week
var ic2 = dates.map(function(d){
  var d1 = ee.Date(d)
  var d2 = d1.advance(1,'day')
  var out = ic.filter(ee.Filter.date(d1,d2))
              .map(qa_mod09ga)
              .map(calc_blue_to_green)
       .median()
       .set("system:time_start",d1.millis())
       .set("system:time_end",d1.millis())
  var n_bands = out.bandNames().size()
  out = out.set("n_bands",n_bands)

return(out)
})
ic2 = ee.ImageCollection.fromImages(ic2.flatten())

// remove empty images (important!)
ic2 = ic2.filter(ee.Filter.greaterThan('n_bands',0)) 
var export_stack = ic2.select(out_var_names).toBands(); 

var export_dates = ic2.map(function(i){
  var f = ee.Feature(null,{'date':i.date().format()})
  return(f)
});
// print(export_dates)


var trueColor143Vis = {
  min: -100.0,
  max: 2500.0,
  bands: ['sur_refl_b01', 'sur_refl_b04', 'sur_refl_b03']
};
Map.addLayer(ic2.first(), trueColor143Vis, 'True Color (143)');


// // EXports =======================================================================
Export.image.toDrive(
  // image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)
{
  image:export_stack,
  description:fnp,
  folder:"gee_SAWater_turbidity", // specify a folder in google drive
  fileNamePrefix:fnp,
  region:roi_bbox,
  scale:500,
  crs:"EPSG:4326",
  fileFormat:"GeoTIFF"
}
)

Export.table.toDrive(//collection, description, folder, fileNamePrefix, fileFormat, selectors)
{
  collection:export_dates, 
  description:"DATES_" +fnp,
  folder:"gee_SAWater_turbidity", // specify a folder in google drive
  fileNamePrefix:"DATES_"+fnp,
  fileFormat:'csv'
}
)



