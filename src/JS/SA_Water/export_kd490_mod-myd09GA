/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mod09ga = ee.ImageCollection("MODIS/061/MOD09GA"),
    myd09ga = ee.ImageCollection("MODIS/061/MYD09GA"),
    mod44w = ee.ImageCollection("MODIS/006/MOD44W"),
    modocga = ee.ImageCollection("MODIS/006/MODOCGA"),
    mydocga = ee.ImageCollection("MODIS/006/MYDOCGA"),
    roi = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[138.19445752698397, -34.66965544493413],
          [138.19445752698397, -35.391583343996],
          [138.59545850354647, -35.391583343996],
          [138.59545850354647, -34.66965544493413]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Description:

// Applying to MODIS SR products: 'MOD09GA' and 'MYD09GA' [Terra and Aqua]
// Deriving turbidity using methods: 'kd(490)' and 'Dogliotti'

// Export daily time series as a rasterstack


//User Options ================================================
var date_start = "2016-09-01";
var date_end = "2017-01-31";

var roi = roi; // As drawn on the map
// var ic = modocga.merge(mydocga);
var ic_aq = mydocga; // ocean reflectance
var ic_aq_qa = mod09ga; // land reflectance + QA bands

//var ic = mod09ga.merge(myd09ga);
var product_name = "MODOCGA"
var time_step = "daily";
var out_var_names = "kd490_mod"; 
var link_tag = "" 
var fnp = product_name+"_"+out_var_names+"_"+time_step+"_"+date_start+"_"+date_end+
          "_" + link_tag;
print(fnp)
var export_folder = "Evan_Learning" 

// viz options
var inferno = ["#000004FF", "#1B0C42FF", "#4B0C6BFF", "#781C6DFF", "#A52C60FF", 
"#CF4446FF", "#ED6925FF", "#FB9A06FF", "#F7D03CFF", "#FCFFA4FF"]               

var roi_bbox = roi.buffer(2000); //adding 2000m in all directions to roi





// Functions ==================================================

/**
 * Returns an image containing just the specified QA bits.
 *
 * Args:
 *   image - The QA Image to get bits from.
 *   start - The first bit position, 0-based.
 *   end   - The last bit position, inclusive.
 *   name  - A name for the output image.
 */
var getQABits = function(image, start, end, newName) { 
    // Compute the bits we need to extract.
    var pattern = 0;
    for (var i = start; i <= end; i++) {
       pattern += Math.pow(2, i);
    }
    var out = image.select([0], [newName])
                  .bitwiseAnd(pattern)
                  .rightShift(start);
    return(image.addBands(out))
};


function qa_mod09ga(i){ 
  // Cloud and shadow mask generation -------------------------
  var cloud = getQABits(i.select("state_1km"), 0,1,"cloud"); // state_1km is the band from QA assessment product. "cloud" is the new 'band'? created from bits 0 and 1
  var cloud_mask = cloud.select("cloud").eq(0); // inverted

  var shadow = getQABits(i.select("state_1km"), 2,2,"shadow");
  var shadow_mask = shadow.select("shadow").eq(0); 

  var brdf = getQABits(i.select("state_1km"), 14,14,"brdf");
  var brdf_mask = brdf.select("brdf").eq(0); 

  var cloudadj = getQABits(i.select("state_1km"), 13,13,"cloudadj");
  var cloudadj_mask = cloudadj.select("cloudadj").eq(0); 

  var aerosol = getQABits(i.select("state_1km"), 6,7,"aerosol");
  var aerosol_mask = aerosol.select("aerosol").lte(1); 

  var cirrus_mask = getQABits(i.select("state_1km"), 8,9,"cirrus")
                           .select("cirrus").lte(0); 
  var icloud_mask = getQABits(i.select("state_1km"), 10, 10,"icloud")
                           .select("icloud").lte(0); 

  
  // Surface reflectance quality mask generation ----------------------
  var qa = i.select('QC_500m').unmask() //selects the QC_500m band from the mod09ga product
  
  // --- overall SR quality  
  var vi_qual = getQABits(qa, 0,1,"vi_qual").select("vi_qual"); //extracts bits 0 and 1 and stores them in a new band called "VI"
  var vi_qual_mask = vi_qual.lte(2); //values in VI band less than or equal to 2 are adequate

  // --- specific red band quality
  var qa_b1 = getQABits(i.select("QC_500m"), 2,5,"qa_b1"); //new band qa_b1 (band 1)
  qa_b1 = qa_b1.select("qa_b1").eq(0); // If bits in the 2-5 range are equal to 0, they are considered 'good' or "highest quality" according to the QA product

  // --- specific nir band quality 
  var qa_b2 = getQABits(i.select("QC_500m"), 6,9,"qa_b2");
  qa_b2 = qa_b2.select("qa_b2").eq(0); 

  // --- specific green band quality 
  var qa_b4 = getQABits(i.select("QC_500m"), 14,17,"qa_b4");
  qa_b4 = qa_b4.select("qa_b4").eq(0); 



                             
  var i_out = i.unmask()
              .addBands(vi_qual)
              .updateMask(cloud_mask)
              // .updateMask(shadow_mask)
              .updateMask(vi_qual_mask)
              //   // .updateMask(qa_b1) // keep
                // .updateMask(qa_b4) // keep
              //   // .updateMask(cloud) // keep
              //   // .updateMask(shadow) // keep
                // .updateMask(brdf_mask) // ?
              //   // .updateMask(cloudadj_mask) // ?               (I will come back to this)
              // .updateMask(cirrus_mask) // helps a bit?         (small hair-like clouds found at high altitudes)
              // .updateMask(icloud_mask) // keep
              //   // .updateMask(aerosol) // not helpful
  return(i_out); 
}




var fn_kd490_modocga = function(image) {
  // Description: Calculate diffuse attenuation coefficient (kd490)
  // Reference: https://oceancolor.gsfc.nasa.gov/resources/atbd/kd/
  // Input: image with blue and green in reflectane units
  // Notes: See https://oceancolor.gsfc.nasa.gov/resources/atbd/kd/
  
    var log10_kd490 = image.expression(
        'a0 + a1*log10(Blue/Green) + a2*(log10(Blue/Green))**2 + a3*(log10(Blue/Green))**3 + a4*(log10(Blue/Green))**4', {
            'Blue': image.select('sur_refl_b10'), //
            'Green': image.select('sur_refl_b12'), //
            'a0': -0.8813, // sensor specific calib param 
            'a1': -2.0584, //sensor specific calib param  
            'a2': 2.5878, //sensor specific calib param  
            'a3': -3.4885,  //sensor specific calib param 
            'a4': -1.5061, //sensor specific calib param  
            'pi': Math.PI,
            'scale_factor': 1//0.0001 //band info
        }).rename('log10_mod');
        
      var kd490 = ee.Image(0.0166).add(ee.Image(10).pow(log10_kd490))
                    .rename("kd490_mod")

        return(image.addBands(kd490));
    };


var mask_water = function(i){
  var water_mask = mod44w.first().select('water_mask').eq(1);
  var out = i.updateMask(water_mask); 
  return(out)
}


// var fn_t = function(image) {
  // Description: Calculate turbidity estimate in Formazin Nephelometric Unit (FNU)
  // Reference: Dogliotti et al 2015, Remote Sensing of Environment
  // Input: image with red and SWIR1 bands in reflectance units
  // Notes: See ACOLITE for most recent parameter calibrations
  
    // var turbidity = image.expression(
    //     '(A_t * (p_w * scale_factor) / (1 - ((p_w * scale_factor )/ C)))', {
    //         'p_w': image.select('Red'), //red band mid wv_len = 645.5nm
    //         'A_t': 378.46, //calib param (ACOLITE)
    //         'B_t': 0.33, //calib param (ACOLITE)
    //         'C': 0.19905, //calib param (ACOLITE)
    //         'pi': Math.PI,
    //         'scale_factor': 1//0.0001 //band info
    //     }).rename('turb_l8');
        
    //     // TO DO: mask turbidity for faulty values
    //     // var swir_mask = image.select('SWIR1'); // UNUSED
    //     // var turb_mask = turbidity.updateMask(swir_mask)
    //                                 // .updateMask(turbidity.gte(0));
                                    
    //     return(image.addBands(turbidity));
    // };



// MAIN ====================================================

// assemble list of dates
var year_start = ee.Date(date_start).get("year")
var year_end = ee.Date(date_end).get("year")
var years = ee.List.sequence(year_start,year_end,1)
var ydays = ee.List.sequence(1,365,1)


var dates = years.map(function(y){
  var out1 = ydays.map(function(d){
    var out2 = ee.Date.parse("Y, D",
        ee.String(ee.Number(y).toInt()).cat(", ").cat(ee.Number(d).toInt()))
    return(out2)
  })
  return(out1)
}).flatten().sort()
dates = dates.filter(ee.Filter.greaterThanOrEquals('item',ee.Date(date_start)))
dates = dates.filter(ee.Filter.lessThanOrEquals('item',ee.Date(date_end)))
print(dates) // see the (conveniently) 365 dates for analysis in the console to the right


// ============================================================
// JOINS //////////////////////////////////////////////////////
// Define an inner join.
ic_aq = ic_aq.filter(ee.Filter.date(date_start,date_end))
ic_aq_qa = ic_aq_qa.filter(ee.Filter.date(date_start,date_end))

var innerJoin = ee.Join.inner();

// Specify an equals filter for image timestamps.
var filterTimeEq = ee.Filter.equals({
  leftField: 'system:time_start',
  rightField: 'system:time_start'
});

// Apply the join.
var innerJoinedMODIS = innerJoin.apply(ic_aq, ic_aq_qa, filterTimeEq);
// Map a function to merge the results in the output FeatureCollection.
var joinedMODIS = innerJoinedMODIS.map(function(feature) {
  return ee.Image.cat(feature.get('primary'), feature.get('secondary'));
});

joinedMODIS = ee.ImageCollection(joinedMODIS)
// Print the result of merging.
print('Inner join, merged bands:', joinedMODIS);
// ============================================================



// // fix AMC geometries
// amc = amc.map(function(f){
//   var out = f.simplify(100)
//             .buffer(-500);
//   return(out)
// })

// composite IC
var ic2 = dates.map(function(d){
    var d1 = ee.Date(d)
    var d2 = d1.advance(1,'day')    // This is set to daily compositions

    var out = joinedMODIS.filter(ee.Filter.date(d1,d2))
                // .map(calc_ndti)
                .map(fn_kd490_modocga)
                .map(mask_water)
                .map(qa_mod09ga)
        .median()
        .set("system:time_start",d1.millis())
        .set("system:time_end",d1.millis())
    var n_bands = out.bandNames().size()
    out = out.set("n_bands",n_bands)
             
  
  return(out)
})

// Apply calc_kd490 function to each image in the Image Collection
// ic2 = ic2.map(calc_kd490);

// Convert the list of composites to an ImageCollection
ic2 = ee.ImageCollection.fromImages(ic2.flatten());

// remove empty images (important!)
ic2 = ic2.filter(ee.Filter.greaterThan('n_bands',0)) 

var export_dates = ic2.map(function(i){
  var f = ee.Feature(null,{'date':i.date().format()})
  return(f)
});
print(export_dates)


var viridis_pal = ["#440154FF", "#482878FF", "#3E4A89FF", "#31688EFF", "#26828EFF", 
"#1F9E89FF", "#35B779FF", "#6DCD59FF", "#B4DE2CFF", "#FDE725FF"]

Map.addLayer(ic2.select("kd490_mod"), 
{ bands:"kd490_mod",
  min:0,
  max:1,
  palette:viridis_pal
  // palette:['blue','black','red']
}, 'kd490', true)



// // Visualization section ==================================================
// Map.addLayer(ic2.select("kd490"), 
// {
//   min:-0.2,
//   max:0.2,
//   palette:['blue','black','red']
// }, 'kd490', false)

// Visualization parameters.
var args = {
  crs: 'EPSG:3857',
  dimensions: '300',
  region: roi,
  bands:"kd490_mod",
  min:0,
  max:1,
  palette:viridis_pal,
  framesPerSecond: 0.4,
};




//Create a video thumbnail and add it to the map.
var thumb = ui.Thumbnail({
  // Specifying a collection for "image" animates the sequence of images.
  image: ic2.select('kd490_mod'),
  params: args,
  style: {
    position: 'bottom-right',
    width: '320px'
  }});
// print(thumb)
// Map.add(thumb);



// // Export section =========================================================
// var export_stack = ic2.select(out_var_names).toBands(); 
// Export.image.toDrive(
//   // image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)
// {
//   image:export_stack,
//   description:fnp,
//   folder:export_folder,
//   fileNamePrefix:fnp,
//   region:roi_bbox,
//   scale:500,
//   crs:"EPSG:4326",
//   fileFormat:"GeoTIFF"
// }
// )

// Export.table.toDrive(//collection, description, folder, fileNamePrefix, fileFormat, selectors)
// {
//   collection:export_dates, 
//   description:"DATES_" +fnp,
//   folder:export_folder, 
//   fileNamePrefix:"DATES_"+fnp,
//   fileFormat:'csv'
// }
// )